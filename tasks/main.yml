---
# tasks file for docker-ce

- name: Gather os specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "vars/{{ ansible_distribution | lower }}-\
      {{ ansible_distribution_major_version | lower }}.yml"
    - "vars/{{ ansible_distribution | lower }}.yml"
    - "vars/{{ ansible_os_family | lower }}.yml"

- name: Remove conflicting packages
  ansible.builtin.package:
    name: "{{ docker_ce_conflicting_packages }}"
    state: absent
  when: docker_ce_conflicting_packages|length > 0

- name: Install requiered packages
  ansible.builtin.package:
    name: "{{ docker_ce_required_packages }}"
    state: present
  when: docker_ce_required_packages|length > 0

- name: Include setup_apt tasks
  ansible.builtin.include_tasks: setup_apt.yml
  when: ansible_os_family|lower == "debian"

- name: Install docker
  ansible.builtin.package:
    name: "{{ docker_ce_packages }}"
    state: present
  when: docker_ce_packages|length > 0

- name: Install docker-compose (as package)
  ansible.builtin.package:
    name: docker-compose
    state: present
  when: docker_ce_install_docker_compose|default(false) and
        not docker_ce_install_docker_compose_via_pip|default(false)

- name: Install pip and docker-compose
  when: docker_ce_install_docker_compose|default(false) and
        docker_ce_install_docker_compose_via_pip|default(false)
  block:
    - name: Include install_pip_debian tasks
      ansible.builtin.include_tasks: install_pip_debian.yml
      when: ansible_os_family|lower == "debian"

    - name: Include install_pip_archlinux tasks
      ansible.builtin.include_tasks: install_pip_archlinux.yml
      when: ansible_os_family|lower == "archlinux"

    - name: Install docker-compose (via pip)
      ansible.builtin.pip:
        name: docker-compose

- name: Make sure the config directory exists
  ansible.builtin.file:
    path: "{{ docker_ce_daemon_json_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Writing daemon.json
  ansible.builtin.copy:
    content: "{{ docker_ce_daemon_json_content | to_nice_json(indent=2) }}\n"
    dest: "{{ docker_ce_daemon_json_file }}"
    owner: root
    group: root
    mode: "0644"
  notify:
    - Restart docker

- name: Check for userns-remap setting
  ansible.builtin.debug:
    msg: "userns-remap: {{ docker_ce_daemon_json_content['userns-remap'] }}"
  when: docker_ce_daemon_json_content['userns-remap'] is defined

- name: Write subuid and subgid
  when: docker_ce_daemon_json_content['userns-remap'] is defined and
        docker_ce_subuid_subgid_create
  block:

    - name: Write subuid
      ansible.builtin.template:
        src: etc/subuid.j2
        dest: /etc/subuid
        owner: root
        group: root
        mode: "0644"

    - name: Write subguid
      ansible.builtin.template:
        src: etc/subgid.j2
        dest: /etc/subgid
        owner: root
        group: root
        mode: "0644"
  # END block: write subuid and subgid

- name: Add users to docker group
  ansible.builtin.user:
    name: "{{ item }}"
    append: true
    groups: docker
  with_items: "{{ docker_ce_users }}"
  when: docker_ce_users|length > 0

- name: Start and enable service
  ansible.builtin.service:
    name: docker
    enabled: true
    state: started
